
ByggernG46.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00001324  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080023c  0080023c  000014f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001750  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097d  00000000  00000000  00002e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c9  00000000  00000000  000037b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000328  00000000  00000000  00004180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  000044a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a80  00000000  00000000  0000497b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  000053fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <vfprintf+0xda>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 e2       	ldi	r30, 0x24	; 36
     37c:	f3 e1       	ldi	r31, 0x13	; 19
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 33       	cpi	r26, 0x3C	; 60
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ac e3       	ldi	r26, 0x3C	; 60
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 34       	cpi	r26, 0x46	; 70
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <main>
     39e:	0c 94 90 09 	jmp	0x1320	; 0x1320 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <setup>:

//#define F_CPU 4.9152E6
#include <util/delay.h>

void setup(void){
	USART_Init(MYUBRR);		// init UART communication
     3a6:	8e e1       	ldi	r24, 0x1E	; 30
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <USART_Init>
	fdevopen((int(*)(char, struct __file*))&USART_Transmit, (int(*)(struct __file*))&USART_Receive);	//configure fprint to use UART
     3ae:	63 e0       	ldi	r22, 0x03	; 3
     3b0:	74 e0       	ldi	r23, 0x04	; 4
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	93 e0       	ldi	r25, 0x03	; 3
     3b6:	0e 94 a8 04 	call	0x950	; 0x950 <fdevopen>
	MCUCR |= (1<<SRE);		// use external memory
     3ba:	85 b7       	in	r24, 0x35	; 53
     3bc:	80 68       	ori	r24, 0x80	; 128
     3be:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); // Ikke bruk PC7-PC4 til external memory
     3c0:	80 b7       	in	r24, 0x30	; 48
     3c2:	80 62       	ori	r24, 0x20	; 32
     3c4:	80 bf       	out	0x30, r24	; 48
	ADC_init();
     3c6:	0e 94 34 02 	call	0x468	; 0x468 <ADC_init>
	SRAM_test();			// test write/read functionality
     3ca:	0e 94 73 03 	call	0x6e6	; 0x6e6 <SRAM_test>
	oled_init();
     3ce:	0e 94 0b 03 	call	0x616	; 0x616 <oled_init>
     3d2:	08 95       	ret

000003d4 <main>:
}



int main(void){
	setup();
     3d4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <setup>
	//uint8_t x,y,L,R;
	char *joyPos;
	
	//oled_reset();
	//oled_write_command(0xD3);
	start_menu();
     3d8:	0e 94 3f 02 	call	0x47e	; 0x47e <start_menu>

static inline void oled_write_command(char c){
	*external_oled_command = c;
}
static inline void oled_write_data(char d){
	*external_oled_data = d;
     3dc:	c0 e0       	ldi	r28, 0x00	; 0
     3de:	d2 e1       	ldi	r29, 0x12	; 18
     3e0:	0c e0       	ldi	r16, 0x0C	; 12
     3e2:	1e e3       	ldi	r17, 0x3E	; 62
     3e4:	0f 2e       	mov	r0, r31
     3e6:	fe e7       	ldi	r31, 0x7E	; 126
     3e8:	df 2e       	mov	r13, r31
     3ea:	f0 2d       	mov	r31, r0
     3ec:	0f 2e       	mov	r0, r31
     3ee:	fc ef       	ldi	r31, 0xFC	; 252
     3f0:	9f 2e       	mov	r9, r31
     3f2:	f0 2d       	mov	r31, r0
     3f4:	0f 2e       	mov	r0, r31
     3f6:	fe e6       	ldi	r31, 0x6E	; 110
     3f8:	af 2e       	mov	r10, r31
     3fa:	f0 2d       	mov	r31, r0
     3fc:	0f 2e       	mov	r0, r31
     3fe:	f4 ed       	ldi	r31, 0xD4	; 212
     400:	bf 2e       	mov	r11, r31
     402:	f0 2d       	mov	r31, r0
     404:	0f 2e       	mov	r0, r31
     406:	f8 e3       	ldi	r31, 0x38	; 56
     408:	cf 2e       	mov	r12, r31
     40a:	f0 2d       	mov	r31, r0
// 					oled_write_data(0b00000000);
// 				
// 				}
// 				}

		joyPos = JoyStick_position();
     40c:	0e 94 19 04 	call	0x832	; 0x832 <JoyStick_position>
     410:	e8 2e       	mov	r14, r24
     412:	f9 2e       	mov	r15, r25
		printf(joyPos);
     414:	9f 93       	push	r25
     416:	8f 93       	push	r24
     418:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
// 		oled_write_data(0b00111110);
// 		oled_write_data(0b00001100);
// 		oled_write_data(0b00000000);


		oled_clear_line(0);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_clear_line>
		oled_write_string(joyPos);
     422:	8e 2d       	mov	r24, r14
     424:	9f 2d       	mov	r25, r15
     426:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
     42a:	08 83       	st	Y, r16
     42c:	18 83       	st	Y, r17
     42e:	d8 82       	st	Y, r13
     430:	98 82       	st	Y, r9
     432:	d8 82       	st	Y, r13
     434:	18 83       	st	Y, r17
     436:	08 83       	st	Y, r16
     438:	18 82       	st	Y, r1
     43a:	08 83       	st	Y, r16
     43c:	18 83       	st	Y, r17
     43e:	a8 82       	st	Y, r10
     440:	b8 82       	st	Y, r11
     442:	c8 82       	st	Y, r12
     444:	18 83       	st	Y, r17
     446:	08 83       	st	Y, r16
     448:	18 82       	st	Y, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44a:	29 ec       	ldi	r18, 0xC9	; 201
     44c:	8f e7       	ldi	r24, 0x7F	; 127
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	21 50       	subi	r18, 0x01	; 1
     452:	80 40       	sbci	r24, 0x00	; 0
     454:	90 40       	sbci	r25, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <main+0x7c>
     458:	00 c0       	rjmp	.+0      	; 0x45a <main+0x86>
     45a:	00 00       	nop
		oled_write_data(0b00111000);
		oled_write_data(0b00111110);
		oled_write_data(0b00001100);
		oled_write_data(0b00000000);
		_delay_ms(100);
		oled_goto_col(0);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <oled_goto_col>
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	d2 cf       	rjmp	.-92     	; 0x40c <main+0x38>

00000468 <ADC_init>:
#include <stdio.h>

#include "Settings.h"
#include <util/delay.h>
void ADC_init(){
	DDRE &= ~(1<<PINE0); // setter pinE0 til input?
     468:	30 98       	cbi	0x06, 0	; 6
     46a:	08 95       	ret

0000046c <ADC_read>:


uint8_t ADC_read(adc_channel_t channel){
		volatile char *adc = (char*) 0x1400; //startadresse for adc external memory
		
		*adc = channel; // 4 + channel
     46c:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     470:	82 e6       	ldi	r24, 0x62	; 98
     472:	8a 95       	dec	r24
     474:	f1 f7       	brne	.-4      	; 0x472 <ADC_read+0x6>
     476:	00 00       	nop
		_delay_us(60);
		//while(test_bit(PINE, PINE0)); // vent pa data
		
		return *adc;
     478:	80 91 00 14 	lds	r24, 0x1400
}
     47c:	08 95       	ret

0000047e <start_menu>:
#include <util/delay.h>


void start_menu(){
	//init
	oled_cls();
     47e:	0e 94 01 03 	call	0x602	; 0x602 <oled_cls>
	oled_home();
     482:	0e 94 db 02 	call	0x5b6	; 0x5b6 <oled_home>
	oled_write_string("# ");
     486:	8a e0       	ldi	r24, 0x0A	; 10
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
	oled_write_string("Start Game");
     48e:	8d e0       	ldi	r24, 0x0D	; 13
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
	oled_pos(1,0);
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <oled_pos>
	oled_write_string("  Hi-Scores");
     4a2:	88 e1       	ldi	r24, 0x18	; 24
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
	oled_pos(2,0);
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <oled_pos>
	oled_write_string("  Placeholder");
     4b6:	84 e2       	ldi	r24, 0x24	; 36
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
	
	int8_t currentLine = 0;
	int8_t prevCurrentLine = 0;
	char *J_dir;
	
	printf("%d\r\n",currentLine);
     4be:	1f 92       	push	r1
     4c0:	1f 92       	push	r1
     4c2:	82 e3       	ldi	r24, 0x32	; 50
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	9f 93       	push	r25
     4c8:	8f 93       	push	r24
     4ca:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
	oled_write_string("  Hi-Scores");
	oled_pos(2,0);
	oled_write_string("  Placeholder");
	
	
	int8_t currentLine = 0;
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
			currentLine--;
			_delay_ms(400);
		}
		
		if (currentLine>2){
			currentLine=0;
     4d8:	e1 2c       	mov	r14, r1
		}
		else if (currentLine<0){
			currentLine=2;
     4da:	68 94       	set
     4dc:	dd 24       	eor	r13, r13
     4de:	d1 f8       	bld	r13, 1
			oled_clear_line(currentLine);
			oled_write_string("# ");
			oled_write_string(menuLines[currentLine]);

			prevCurrentLine = currentLine;
			printf("%d\r\n",currentLine);
     4e0:	02 e3       	ldi	r16, 0x32	; 50
     4e2:	11 e0       	ldi	r17, 0x01	; 1
     4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <start_menu+0x6a>
#include "Oled.h"
#include "USBMFC.h"
#include <util/delay.h>


void start_menu(){
     4e6:	cf 2d       	mov	r28, r15
	
	printf("%d\r\n",currentLine);
	
	char *menuLines = {"Start Game","Hi-Scores","Placeholder"};
	while(1){
		J_dir = JoyStick_position();
     4e8:	0e 94 19 04 	call	0x832	; 0x832 <JoyStick_position>
		if(J_dir=="DOWN"){
     4ec:	21 e0       	ldi	r18, 0x01	; 1
     4ee:	87 33       	cpi	r24, 0x37	; 55
     4f0:	92 07       	cpc	r25, r18
     4f2:	69 f4       	brne	.+26     	; 0x50e <__stack+0xf>
			currentLine++;
     4f4:	ff 24       	eor	r15, r15
     4f6:	f3 94       	inc	r15
     4f8:	fc 0e       	add	r15, r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fa:	87 e2       	ldi	r24, 0x27	; 39
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
     4fe:	25 e0       	ldi	r18, 0x05	; 5
     500:	81 50       	subi	r24, 0x01	; 1
     502:	90 40       	sbci	r25, 0x00	; 0
     504:	20 40       	sbci	r18, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <__stack+0x1>
     508:	00 c0       	rjmp	.+0      	; 0x50a <__stack+0xb>
     50a:	00 00       	nop
     50c:	11 c0       	rjmp	.+34     	; 0x530 <__stack+0x31>
			_delay_ms(400);
		} else if(J_dir == "UP"){
     50e:	8c 53       	subi	r24, 0x3C	; 60
     510:	91 40       	sbci	r25, 0x01	; 1
     512:	69 f4       	brne	.+26     	; 0x52e <__stack+0x2f>
			currentLine--;
     514:	ff 24       	eor	r15, r15
     516:	fa 94       	dec	r15
     518:	fc 0e       	add	r15, r28
     51a:	87 e2       	ldi	r24, 0x27	; 39
     51c:	9f ef       	ldi	r25, 0xFF	; 255
     51e:	25 e0       	ldi	r18, 0x05	; 5
     520:	81 50       	subi	r24, 0x01	; 1
     522:	90 40       	sbci	r25, 0x00	; 0
     524:	20 40       	sbci	r18, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <__stack+0x21>
     528:	00 c0       	rjmp	.+0      	; 0x52a <__stack+0x2b>
     52a:	00 00       	nop
     52c:	01 c0       	rjmp	.+2      	; 0x530 <__stack+0x31>
     52e:	fc 2e       	mov	r15, r28
			_delay_ms(400);
		}
		
		if (currentLine>2){
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	8f 15       	cp	r24, r15
     534:	1c f0       	brlt	.+6      	; 0x53c <__stack+0x3d>
			currentLine=0;
		}
		else if (currentLine<0){
     536:	ff 20       	and	r15, r15
     538:	24 f4       	brge	.+8      	; 0x542 <__stack+0x43>
     53a:	02 c0       	rjmp	.+4      	; 0x540 <__stack+0x41>
			currentLine--;
			_delay_ms(400);
		}
		
		if (currentLine>2){
			currentLine=0;
     53c:	fe 2c       	mov	r15, r14
     53e:	01 c0       	rjmp	.+2      	; 0x542 <__stack+0x43>
		}
		else if (currentLine<0){
			currentLine=2;
     540:	fd 2c       	mov	r15, r13
		}
		
		if (currentLine != prevCurrentLine){
     542:	cf 15       	cp	r28, r15
     544:	81 f2       	breq	.-96     	; 0x4e6 <start_menu+0x68>
			oled_clear_line(prevCurrentLine);
     546:	8c 2f       	mov	r24, r28
     548:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_clear_line>
			oled_write_string("  ");
     54c:	8f e3       	ldi	r24, 0x3F	; 63
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
			oled_write_string(menuLines[prevCurrentLine]);
     554:	ec 2f       	mov	r30, r28
     556:	ff 27       	eor	r31, r31
     558:	e7 fd       	sbrc	r30, 7
     55a:	f0 95       	com	r31
     55c:	e3 5f       	subi	r30, 0xF3	; 243
     55e:	fe 4f       	sbci	r31, 0xFE	; 254
     560:	80 81       	ld	r24, Z
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
			oled_clear_line(currentLine);
     568:	8f 2d       	mov	r24, r15
     56a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_clear_line>
			oled_write_string("# ");
     56e:	8a e0       	ldi	r24, 0x0A	; 10
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>
			oled_write_string(menuLines[currentLine]);
     576:	cf 2d       	mov	r28, r15
     578:	dd 27       	eor	r29, r29
     57a:	c7 fd       	sbrc	r28, 7
     57c:	d0 95       	com	r29
     57e:	fe 01       	movw	r30, r28
     580:	e3 5f       	subi	r30, 0xF3	; 243
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	80 81       	ld	r24, Z
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 51 03 	call	0x6a2	; 0x6a2 <oled_write_string>

			prevCurrentLine = currentLine;
			printf("%d\r\n",currentLine);
     58c:	df 93       	push	r29
     58e:	ff 92       	push	r15
     590:	1f 93       	push	r17
     592:	0f 93       	push	r16
     594:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	a2 cf       	rjmp	.-188    	; 0x4e6 <start_menu+0x68>

000005a2 <oled_goto_col>:
void oled_goto_line(uint8_t line){
	oled_write_command(0xB0 + line);
}

void oled_goto_col(uint8_t col){
	oled_write_command(0x0F & (col));
     5a2:	98 2f       	mov	r25, r24
     5a4:	9f 70       	andi	r25, 0x0F	; 15

void oled_init(void);


static inline void oled_write_command(char c){
	*external_oled_command = c;
     5a6:	e0 e0       	ldi	r30, 0x00	; 0
     5a8:	f0 e1       	ldi	r31, 0x10	; 16
     5aa:	90 83       	st	Z, r25
	oled_write_command(0x10 | (col>>4));
     5ac:	82 95       	swap	r24
     5ae:	8f 70       	andi	r24, 0x0F	; 15
     5b0:	80 61       	ori	r24, 0x10	; 16
     5b2:	80 83       	st	Z, r24
     5b4:	08 95       	ret

000005b6 <oled_home>:
     5b6:	80 eb       	ldi	r24, 0xB0	; 176
     5b8:	80 93 00 10 	sts	0x1000, r24
}

void oled_home(void){
	oled_goto_line(0);
	oled_goto_col(0);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <oled_goto_col>
     5c2:	08 95       	ret

000005c4 <oled_pos>:
}



void oled_goto_line(uint8_t line){
	oled_write_command(0xB0 + line);
     5c4:	80 55       	subi	r24, 0x50	; 80
     5c6:	80 93 00 10 	sts	0x1000, r24
	oled_goto_col(0);
}

void oled_pos(int line, int col){
	oled_goto_line(line);
	oled_goto_col(col);
     5ca:	86 2f       	mov	r24, r22
     5cc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <oled_goto_col>
     5d0:	08 95       	ret

000005d2 <oled_clear_line>:
}

void oled_clear_line(uint8_t line){
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
}



void oled_goto_line(uint8_t line){
	oled_write_command(0xB0 + line);
     5da:	80 55       	subi	r24, 0x50	; 80
     5dc:	80 93 00 10 	sts	0x1000, r24
     5e0:	c0 e8       	ldi	r28, 0x80	; 128
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
}
static inline void oled_write_data(char d){
	*external_oled_data = d;
     5e4:	00 e0       	ldi	r16, 0x00	; 0
     5e6:	12 e1       	ldi	r17, 0x12	; 18
     5e8:	f8 01       	movw	r30, r16
     5ea:	10 82       	st	Z, r1

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for (int i = 0; i<128; i++){
		oled_write_data(0);
		oled_goto_col(0);
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <oled_goto_col>
     5f2:	21 97       	sbiw	r28, 0x01	; 1
	oled_goto_col(col);
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for (int i = 0; i<128; i++){
     5f4:	20 97       	sbiw	r28, 0x00	; 0
     5f6:	c1 f7       	brne	.-16     	; 0x5e8 <oled_clear_line+0x16>
		oled_write_data(0);
		oled_goto_col(0);
	}
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	08 95       	ret

00000602 <oled_cls>:

void oled_cls(void){
     602:	cf 93       	push	r28
     604:	c0 e0       	ldi	r28, 0x00	; 0
	for (int row = 0; row<8; row++){
		oled_clear_line(row);
     606:	8c 2f       	mov	r24, r28
     608:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_clear_line>
     60c:	cf 5f       	subi	r28, 0xFF	; 255
		oled_goto_col(0);
	}
}

void oled_cls(void){
	for (int row = 0; row<8; row++){
     60e:	c8 30       	cpi	r28, 0x08	; 8
     610:	d1 f7       	brne	.-12     	; 0x606 <oled_cls+0x4>
		oled_clear_line(row);
	}
}
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <oled_init>:

void oled_init(void);


static inline void oled_write_command(char c){
	*external_oled_command = c;
     616:	e0 e0       	ldi	r30, 0x00	; 0
     618:	f0 e1       	ldi	r31, 0x10	; 16
     61a:	8e ea       	ldi	r24, 0xAE	; 174
     61c:	80 83       	st	Z, r24
     61e:	81 ea       	ldi	r24, 0xA1	; 161
     620:	80 83       	st	Z, r24
     622:	8a ed       	ldi	r24, 0xDA	; 218
     624:	80 83       	st	Z, r24
     626:	82 e1       	ldi	r24, 0x12	; 18
     628:	80 83       	st	Z, r24
     62a:	88 ec       	ldi	r24, 0xC8	; 200
     62c:	80 83       	st	Z, r24
     62e:	88 ea       	ldi	r24, 0xA8	; 168
     630:	80 83       	st	Z, r24
     632:	8f e3       	ldi	r24, 0x3F	; 63
     634:	80 83       	st	Z, r24
     636:	85 ed       	ldi	r24, 0xD5	; 213
     638:	80 83       	st	Z, r24
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	80 83       	st	Z, r24
     63e:	81 e8       	ldi	r24, 0x81	; 129
     640:	80 83       	st	Z, r24
     642:	80 e5       	ldi	r24, 0x50	; 80
     644:	80 83       	st	Z, r24
     646:	89 ed       	ldi	r24, 0xD9	; 217
     648:	80 83       	st	Z, r24
     64a:	81 e2       	ldi	r24, 0x21	; 33
     64c:	80 83       	st	Z, r24
     64e:	80 e2       	ldi	r24, 0x20	; 32
     650:	80 83       	st	Z, r24
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	80 83       	st	Z, r24
     656:	8b ed       	ldi	r24, 0xDB	; 219
     658:	80 83       	st	Z, r24
     65a:	80 e3       	ldi	r24, 0x30	; 48
     65c:	80 83       	st	Z, r24
     65e:	8d ea       	ldi	r24, 0xAD	; 173
     660:	80 83       	st	Z, r24
     662:	10 82       	st	Z, r1
     664:	84 ea       	ldi	r24, 0xA4	; 164
     666:	80 83       	st	Z, r24
     668:	86 ea       	ldi	r24, 0xA6	; 166
     66a:	80 83       	st	Z, r24
     66c:	8f ea       	ldi	r24, 0xAF	; 175
     66e:	80 83       	st	Z, r24
	oled_write_command(0x00);		 //Horizontal addressing mode
	oled_write_command(0xa4);        //out  follows  RAM  content
	oled_write_command(0xa6);        //set  normal  display
	oled_write_command(0xaf);        //  display  on
	
	oled_cls();
     670:	0e 94 01 03 	call	0x602	; 0x602 <oled_cls>
	oled_home();
     674:	0e 94 db 02 	call	0x5b6	; 0x5b6 <oled_home>
     678:	08 95       	ret

0000067a <oled_write_char>:
	for (int row = 0; row<8; row++){
		oled_clear_line(row);
	}
}

void oled_write_char(char tegn){
     67a:	28 e0       	ldi	r18, 0x08	; 8
     67c:	82 9f       	mul	r24, r18
     67e:	c0 01       	movw	r24, r0
     680:	11 24       	eor	r1, r1
     682:	fc 01       	movw	r30, r24
     684:	e0 59       	subi	r30, 0x90	; 144
     686:	f0 40       	sbci	r31, 0x00	; 0
	int a = (int)tegn;
	for (int i=0; i<8; i++){
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
}
static inline void oled_write_data(char d){
	*external_oled_data = d;
     68c:	a0 e0       	ldi	r26, 0x00	; 0
     68e:	b2 e1       	ldi	r27, 0x12	; 18
		oled_write_data(pgm_read_byte(&font8[a-32][i]));
     690:	84 91       	lpm	r24, Z
     692:	8c 93       	st	X, r24
	}
}

void oled_write_char(char tegn){
	int a = (int)tegn;
	for (int i=0; i<8; i++){
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	31 96       	adiw	r30, 0x01	; 1
     69a:	28 30       	cpi	r18, 0x08	; 8
     69c:	31 05       	cpc	r19, r1
     69e:	c1 f7       	brne	.-16     	; 0x690 <oled_write_char+0x16>
		oled_write_data(pgm_read_byte(&font8[a-32][i]));
	}
}
     6a0:	08 95       	ret

000006a2 <oled_write_string>:

void oled_write_string(const char *streng){
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	8c 01       	movw	r16, r24
     6b0:	7c 01       	movw	r14, r24
	for (int i=0; i<strlen(streng); i++){
     6b2:	c0 e0       	ldi	r28, 0x00	; 0
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <oled_write_string+0x22>
		oled_write_char(streng[i]);
     6b8:	f7 01       	movw	r30, r14
     6ba:	81 91       	ld	r24, Z+
     6bc:	7f 01       	movw	r14, r30
     6be:	0e 94 3d 03 	call	0x67a	; 0x67a <oled_write_char>
		oled_write_data(pgm_read_byte(&font8[a-32][i]));
	}
}

void oled_write_string(const char *streng){
	for (int i=0; i<strlen(streng); i++){
     6c2:	21 96       	adiw	r28, 0x01	; 1
     6c4:	f8 01       	movw	r30, r16
     6c6:	01 90       	ld	r0, Z+
     6c8:	00 20       	and	r0, r0
     6ca:	e9 f7       	brne	.-6      	; 0x6c6 <oled_write_string+0x24>
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	e0 1b       	sub	r30, r16
     6d0:	f1 0b       	sbc	r31, r17
     6d2:	ce 17       	cp	r28, r30
     6d4:	df 07       	cpc	r29, r31
     6d6:	80 f3       	brcs	.-32     	; 0x6b8 <oled_write_string+0x16>
		oled_write_char(streng[i]);
	}
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	08 95       	ret

000006e6 <SRAM_test>:
#include "SRAM.h"
#include <avr/io.h>
#include <stdlib.h>


void SRAM_test(void){
     6e6:	cf 92       	push	r12
     6e8:	df 92       	push	r13
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size= 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
	printf("Starting SRAM test...\n");// rand() stores some internal state, so calling this function in a loop will
     6f6:	82 e4       	ldi	r24, 0x42	; 66
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 07 05 	call	0xa0e	; 0xa0e <puts>
									// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();          // Write phase: Immediately check that the correct value was stored
     6fe:	0e 94 98 04 	call	0x930	; 0x930 <rand>
     702:	6c 01       	movw	r12, r24
	srand(seed);
     704:	0e 94 9d 04 	call	0x93a	; 0x93a <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     708:	c0 e0       	ldi	r28, 0x00	; 0
     70a:	d0 e0       	ldi	r29, 0x00	; 0


void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size= 0x800;
	uint16_t write_errors= 0;
     70c:	00 e0       	ldi	r16, 0x00	; 0
     70e:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     710:	0f 2e       	mov	r0, r31
     712:	f8 e5       	ldi	r31, 0x58	; 88
     714:	ef 2e       	mov	r14, r31
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	ff 2e       	mov	r15, r31
     71a:	f0 2d       	mov	r31, r0
	printf("Starting SRAM test...\n");// rand() stores some internal state, so calling this function in a loop will
									// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();          // Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     71c:	0e 94 98 04 	call	0x930	; 0x930 <rand>
     720:	fe 01       	movw	r30, r28
     722:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
     724:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
     726:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     728:	28 17       	cp	r18, r24
     72a:	a9 f0       	breq	.+42     	; 0x756 <SRAM_test+0x70>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
     72c:	99 27       	eor	r25, r25
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	1f 92       	push	r1
     734:	2f 93       	push	r18
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	ff 92       	push	r15
     73c:	ef 92       	push	r14
     73e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
			write_errors++;
     742:	0f 5f       	subi	r16, 0xFF	; 255
     744:	1f 4f       	sbci	r17, 0xFF	; 255
     746:	8d b7       	in	r24, 0x3d	; 61
     748:	9e b7       	in	r25, 0x3e	; 62
     74a:	08 96       	adiw	r24, 0x08	; 8
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	9e bf       	out	0x3e, r25	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	8d bf       	out	0x3d, r24	; 61
	uint16_t retrieval_errors= 0;
	printf("Starting SRAM test...\n");// rand() stores some internal state, so calling this function in a loop will
									// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();          // Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     756:	21 96       	adiw	r28, 0x01	; 1
     758:	c1 15       	cp	r28, r1
     75a:	98 e0       	ldi	r25, 0x08	; 8
     75c:	d9 07       	cpc	r29, r25
     75e:	f1 f6       	brne	.-68     	; 0x71c <SRAM_test+0x36>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
     760:	c6 01       	movw	r24, r12
     762:	0e 94 9d 04 	call	0x93a	; 0x93a <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     766:	c0 e0       	ldi	r28, 0x00	; 0
     768:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size= 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
     76a:	e1 2c       	mov	r14, r1
     76c:	f1 2c       	mov	r15, r1
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value); 
     76e:	0f 2e       	mov	r0, r31
     770:	f2 e9       	ldi	r31, 0x92	; 146
     772:	cf 2e       	mov	r12, r31
     774:	f1 e0       	ldi	r31, 0x01	; 1
     776:	df 2e       	mov	r13, r31
     778:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
     77a:	0e 94 98 04 	call	0x930	; 0x930 <rand>
     77e:	fe 01       	movw	r30, r28
     780:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
     782:	20 81       	ld	r18, Z
		if (retreived_value != some_value) {
     784:	28 17       	cp	r18, r24
     786:	b1 f0       	breq	.+44     	; 0x7b4 <SRAM_test+0xce>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value); 
     788:	99 27       	eor	r25, r25
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	1f 92       	push	r1
     790:	2f 93       	push	r18
     792:	df 93       	push	r29
     794:	cf 93       	push	r28
     796:	df 92       	push	r13
     798:	cf 92       	push	r12
     79a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
			retrieval_errors++;
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	e8 1a       	sub	r14, r24
     7a2:	f8 0a       	sbc	r15, r24
     7a4:	8d b7       	in	r24, 0x3d	; 61
     7a6:	9e b7       	in	r25, 0x3e	; 62
     7a8:	08 96       	adiw	r24, 0x08	; 8
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	9e bf       	out	0x3e, r25	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed); // reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     7b4:	21 96       	adiw	r28, 0x01	; 1
     7b6:	c1 15       	cp	r28, r1
     7b8:	98 e0       	ldi	r25, 0x08	; 8
     7ba:	d9 07       	cpc	r29, r25
     7bc:	f1 f6       	brne	.-68     	; 0x77a <SRAM_test+0x94>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r\n", i, retreived_value, some_value); 
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with %4d errors in write phase and %4d errors in retrieval phase.\r\n", write_errors, retrieval_errors);
     7be:	ff 92       	push	r15
     7c0:	ef 92       	push	r14
     7c2:	1f 93       	push	r17
     7c4:	0f 93       	push	r16
     7c6:	80 ed       	ldi	r24, 0xD0	; 208
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <printf>
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	08 95       	ret

000007f0 <USART_Init>:


void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     7f0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     7f2:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7f4:	88 e1       	ldi	r24, 0x18	; 24
     7f6:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     7f8:	8e e8       	ldi	r24, 0x8E	; 142
     7fa:	80 bd       	out	0x20, r24	; 32
     7fc:	08 95       	ret

000007fe <USART_Transmit>:
}


void USART_Transmit(unsigned char data){
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     7fe:	5d 9b       	sbis	0x0b, 5	; 11
     800:	fe cf       	rjmp	.-4      	; 0x7fe <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
     802:	8c b9       	out	0x0c, r24	; 12
     804:	08 95       	ret

00000806 <USART_Receive>:
	}


unsigned char USART_Receive( void ){
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     806:	5f 9b       	sbis	0x0b, 7	; 11
     808:	fe cf       	rjmp	.-4      	; 0x806 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
     80a:	8c b1       	in	r24, 0x0c	; 12
}
     80c:	08 95       	ret

0000080e <JoyStick_bit_x>:
#include "Settings.h"
#include "USBMFC.h"
#include "adc.h"

uint8_t JoyStick_bit_x(void){
	uint8_t x = ADC_read(CHANNEL_4);
     80e:	87 e0       	ldi	r24, 0x07	; 7
     810:	0e 94 36 02 	call	0x46c	; 0x46c <ADC_read>
	return x;
};
     814:	08 95       	ret

00000816 <JoyStick_bit_y>:

uint8_t JoyStick_bit_y(void){
	uint8_t y = ADC_read(CHANNEL_3);
     816:	86 e0       	ldi	r24, 0x06	; 6
     818:	0e 94 36 02 	call	0x46c	; 0x46c <ADC_read>
	return y;
};
     81c:	08 95       	ret

0000081e <USBMFC_JoyStick_bit>:
uint8_t Slider_bit_L(void){
	uint8_t l = ADC_read(CHANNEL_1);
	return l;
};

struct JoyStick_bit USBMFC_JoyStick_bit(){
     81e:	cf 93       	push	r28
	uint8_t x = JoyStick_bit_x();
     820:	0e 94 07 04 	call	0x80e	; 0x80e <JoyStick_bit_x>
     824:	c8 2f       	mov	r28, r24
	uint8_t y = JoyStick_bit_y();
     826:	0e 94 0b 04 	call	0x816	; 0x816 <JoyStick_bit_y>
     82a:	98 2f       	mov	r25, r24
	struct JoyStick_bit pos = {x,y};
	return pos;
};
     82c:	8c 2f       	mov	r24, r28
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <JoyStick_position>:
char *JoyStick_position(void){
	uint8_t limit = 30;
	uint8_t limitup = 127+limit;
	uint8_t limitdown = 127-limit;

	struct JoyStick_bit JoyStickBits = USBMFC_JoyStick_bit();
     832:	0e 94 0f 04 	call	0x81e	; 0x81e <USBMFC_JoyStick_bit>

	if ((JoyStickBits.x > limitup) && (JoyStickBits.y > limitup)){
     836:	8e 39       	cpi	r24, 0x9E	; 158
     838:	38 f0       	brcs	.+14     	; 0x848 <JoyStick_position+0x16>
     83a:	9e 39       	cpi	r25, 0x9E	; 158
     83c:	28 f0       	brcs	.+10     	; 0x848 <JoyStick_position+0x16>
		if (JoyStickBits.x > JoyStickBits.y){
     83e:	98 17       	cp	r25, r24
     840:	b8 f4       	brcc	.+46     	; 0x870 <JoyStick_position+0x3e>
			return "RIGHT";
     842:	88 e2       	ldi	r24, 0x28	; 40
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	08 95       	ret
		}
		else {
			return "UP";
		};
	} 
	else if ((JoyStickBits.x < limitdown) && (JoyStickBits.y < limitdown)){
     848:	81 36       	cpi	r24, 0x61	; 97
     84a:	38 f4       	brcc	.+14     	; 0x85a <JoyStick_position+0x28>
     84c:	91 36       	cpi	r25, 0x61	; 97
     84e:	28 f4       	brcc	.+10     	; 0x85a <JoyStick_position+0x28>
		if (JoyStickBits.x < JoyStickBits.y){
     850:	89 17       	cp	r24, r25
     852:	88 f4       	brcc	.+34     	; 0x876 <JoyStick_position+0x44>
			return "LEFT";
     854:	8e e2       	ldi	r24, 0x2E	; 46
     856:	92 e0       	ldi	r25, 0x02	; 2
     858:	08 95       	ret
		}
		else {
			return "DOWN";
		};
	}
	else if (JoyStickBits.x > limitup){
     85a:	8e 39       	cpi	r24, 0x9E	; 158
     85c:	78 f4       	brcc	.+30     	; 0x87c <JoyStick_position+0x4a>
		return "RIGHT";
	} 
	else if (JoyStickBits.y > limitup){
     85e:	9e 39       	cpi	r25, 0x9E	; 158
     860:	80 f4       	brcc	.+32     	; 0x882 <JoyStick_position+0x50>
		return "UP";
	} 
	else if (JoyStickBits.x < limitdown){
     862:	81 36       	cpi	r24, 0x61	; 97
     864:	88 f0       	brcs	.+34     	; 0x888 <JoyStick_position+0x56>
		return "LEFT";
	}
	else if (JoyStickBits.y < limitdown){
     866:	91 36       	cpi	r25, 0x61	; 97
     868:	90 f4       	brcc	.+36     	; 0x88e <JoyStick_position+0x5c>
		return "DOWN";
     86a:	87 e3       	ldi	r24, 0x37	; 55
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	08 95       	ret
	if ((JoyStickBits.x > limitup) && (JoyStickBits.y > limitup)){
		if (JoyStickBits.x > JoyStickBits.y){
			return "RIGHT";
		}
		else {
			return "UP";
     870:	8c e3       	ldi	r24, 0x3C	; 60
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	08 95       	ret
	else if ((JoyStickBits.x < limitdown) && (JoyStickBits.y < limitdown)){
		if (JoyStickBits.x < JoyStickBits.y){
			return "LEFT";
		}
		else {
			return "DOWN";
     876:	87 e3       	ldi	r24, 0x37	; 55
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	08 95       	ret
		};
	}
	else if (JoyStickBits.x > limitup){
		return "RIGHT";
     87c:	88 e2       	ldi	r24, 0x28	; 40
     87e:	92 e0       	ldi	r25, 0x02	; 2
     880:	08 95       	ret
	} 
	else if (JoyStickBits.y > limitup){
		return "UP";
     882:	8c e3       	ldi	r24, 0x3C	; 60
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	08 95       	ret
	} 
	else if (JoyStickBits.x < limitdown){
		return "LEFT";
     888:	8e e2       	ldi	r24, 0x2E	; 46
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	08 95       	ret
	}
	else if (JoyStickBits.y < limitdown){
		return "DOWN";
	}
	else {
		return "NEUTRAL";
     88e:	83 e3       	ldi	r24, 0x33	; 51
     890:	92 e0       	ldi	r25, 0x02	; 2
	};
};
     892:	08 95       	ret

00000894 <do_rand>:
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	ec 01       	movw	r28, r24
     8aa:	68 81       	ld	r22, Y
     8ac:	79 81       	ldd	r23, Y+1	; 0x01
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	9b 81       	ldd	r25, Y+3	; 0x03
     8b2:	61 15       	cp	r22, r1
     8b4:	71 05       	cpc	r23, r1
     8b6:	81 05       	cpc	r24, r1
     8b8:	91 05       	cpc	r25, r1
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <do_rand+0x30>
     8bc:	64 e2       	ldi	r22, 0x24	; 36
     8be:	79 ed       	ldi	r23, 0xD9	; 217
     8c0:	8b e5       	ldi	r24, 0x5B	; 91
     8c2:	97 e0       	ldi	r25, 0x07	; 7
     8c4:	2d e1       	ldi	r18, 0x1D	; 29
     8c6:	33 ef       	ldi	r19, 0xF3	; 243
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__divmodsi4>
     8d0:	49 01       	movw	r8, r18
     8d2:	5a 01       	movw	r10, r20
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	a7 ea       	ldi	r26, 0xA7	; 167
     8da:	b1 e4       	ldi	r27, 0x41	; 65
     8dc:	0e 94 15 09 	call	0x122a	; 0x122a <__muluhisi3>
     8e0:	6b 01       	movw	r12, r22
     8e2:	7c 01       	movw	r14, r24
     8e4:	ac ee       	ldi	r26, 0xEC	; 236
     8e6:	b4 ef       	ldi	r27, 0xF4	; 244
     8e8:	a5 01       	movw	r20, r10
     8ea:	94 01       	movw	r18, r8
     8ec:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulohisi3>
     8f0:	c6 0e       	add	r12, r22
     8f2:	d7 1e       	adc	r13, r23
     8f4:	e8 1e       	adc	r14, r24
     8f6:	f9 1e       	adc	r15, r25
     8f8:	f7 fe       	sbrs	r15, 7
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <do_rand+0x74>
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	c8 1a       	sub	r12, r24
     900:	d1 08       	sbc	r13, r1
     902:	e1 08       	sbc	r14, r1
     904:	80 e8       	ldi	r24, 0x80	; 128
     906:	f8 0a       	sbc	r15, r24
     908:	c8 82       	st	Y, r12
     90a:	d9 82       	std	Y+1, r13	; 0x01
     90c:	ea 82       	std	Y+2, r14	; 0x02
     90e:	fb 82       	std	Y+3, r15	; 0x03
     910:	c6 01       	movw	r24, r12
     912:	9f 77       	andi	r25, 0x7F	; 127
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	9f 90       	pop	r9
     926:	8f 90       	pop	r8
     928:	08 95       	ret

0000092a <rand_r>:
     92a:	0e 94 4a 04 	call	0x894	; 0x894 <do_rand>
     92e:	08 95       	ret

00000930 <rand>:
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 4a 04 	call	0x894	; 0x894 <do_rand>
     938:	08 95       	ret

0000093a <srand>:
     93a:	a0 e0       	ldi	r26, 0x00	; 0
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	80 93 00 01 	sts	0x0100, r24
     942:	90 93 01 01 	sts	0x0101, r25
     946:	a0 93 02 01 	sts	0x0102, r26
     94a:	b0 93 03 01 	sts	0x0103, r27
     94e:	08 95       	ret

00000950 <fdevopen>:
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	8b 01       	movw	r16, r22
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	31 f4       	brne	.+12     	; 0x96c <fdevopen+0x1c>
     960:	61 15       	cp	r22, r1
     962:	71 05       	cpc	r23, r1
     964:	19 f4       	brne	.+6      	; 0x96c <fdevopen+0x1c>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	38 c0       	rjmp	.+112    	; 0x9dc <fdevopen+0x8c>
     96c:	6e e0       	ldi	r22, 0x0E	; 14
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 06 07 	call	0xe0c	; 0xe0c <calloc>
     978:	fc 01       	movw	r30, r24
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	a1 f3       	breq	.-24     	; 0x966 <fdevopen+0x16>
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	83 83       	std	Z+3, r24	; 0x03
     982:	01 15       	cp	r16, r1
     984:	11 05       	cpc	r17, r1
     986:	71 f0       	breq	.+28     	; 0x9a4 <fdevopen+0x54>
     988:	13 87       	std	Z+11, r17	; 0x0b
     98a:	02 87       	std	Z+10, r16	; 0x0a
     98c:	81 e8       	ldi	r24, 0x81	; 129
     98e:	83 83       	std	Z+3, r24	; 0x03
     990:	80 91 3c 02 	lds	r24, 0x023C
     994:	90 91 3d 02 	lds	r25, 0x023D
     998:	89 2b       	or	r24, r25
     99a:	21 f4       	brne	.+8      	; 0x9a4 <fdevopen+0x54>
     99c:	f0 93 3d 02 	sts	0x023D, r31
     9a0:	e0 93 3c 02 	sts	0x023C, r30
     9a4:	20 97       	sbiw	r28, 0x00	; 0
     9a6:	c9 f0       	breq	.+50     	; 0x9da <fdevopen+0x8a>
     9a8:	d1 87       	std	Z+9, r29	; 0x09
     9aa:	c0 87       	std	Z+8, r28	; 0x08
     9ac:	83 81       	ldd	r24, Z+3	; 0x03
     9ae:	82 60       	ori	r24, 0x02	; 2
     9b0:	83 83       	std	Z+3, r24	; 0x03
     9b2:	80 91 3e 02 	lds	r24, 0x023E
     9b6:	90 91 3f 02 	lds	r25, 0x023F
     9ba:	89 2b       	or	r24, r25
     9bc:	71 f4       	brne	.+28     	; 0x9da <fdevopen+0x8a>
     9be:	f0 93 3f 02 	sts	0x023F, r31
     9c2:	e0 93 3e 02 	sts	0x023E, r30
     9c6:	80 91 40 02 	lds	r24, 0x0240
     9ca:	90 91 41 02 	lds	r25, 0x0241
     9ce:	89 2b       	or	r24, r25
     9d0:	21 f4       	brne	.+8      	; 0x9da <fdevopen+0x8a>
     9d2:	f0 93 41 02 	sts	0x0241, r31
     9d6:	e0 93 40 02 	sts	0x0240, r30
     9da:	cf 01       	movw	r24, r30
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <printf>:
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e9 ef       	ldi	r30, 0xF9	; 249
     9ec:	f4 e0       	ldi	r31, 0x04	; 4
     9ee:	0c 94 38 09 	jmp	0x1270	; 0x1270 <__prologue_saves__+0x20>
     9f2:	fe 01       	movw	r30, r28
     9f4:	35 96       	adiw	r30, 0x05	; 5
     9f6:	61 91       	ld	r22, Z+
     9f8:	71 91       	ld	r23, Z+
     9fa:	af 01       	movw	r20, r30
     9fc:	80 91 3e 02 	lds	r24, 0x023E
     a00:	90 91 3f 02 	lds	r25, 0x023F
     a04:	0e 94 34 05 	call	0xa68	; 0xa68 <vfprintf>
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__epilogue_restores__+0x20>

00000a0e <puts>:
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	e0 91 3e 02 	lds	r30, 0x023E
     a1a:	f0 91 3f 02 	lds	r31, 0x023F
     a1e:	23 81       	ldd	r18, Z+3	; 0x03
     a20:	21 ff       	sbrs	r18, 1
     a22:	1b c0       	rjmp	.+54     	; 0xa5a <puts+0x4c>
     a24:	ec 01       	movw	r28, r24
     a26:	00 e0       	ldi	r16, 0x00	; 0
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	89 91       	ld	r24, Y+
     a2c:	60 91 3e 02 	lds	r22, 0x023E
     a30:	70 91 3f 02 	lds	r23, 0x023F
     a34:	db 01       	movw	r26, r22
     a36:	18 96       	adiw	r26, 0x08	; 8
     a38:	ed 91       	ld	r30, X+
     a3a:	fc 91       	ld	r31, X
     a3c:	19 97       	sbiw	r26, 0x09	; 9
     a3e:	88 23       	and	r24, r24
     a40:	31 f0       	breq	.+12     	; 0xa4e <puts+0x40>
     a42:	09 95       	icall
     a44:	89 2b       	or	r24, r25
     a46:	89 f3       	breq	.-30     	; 0xa2a <puts+0x1c>
     a48:	0f ef       	ldi	r16, 0xFF	; 255
     a4a:	1f ef       	ldi	r17, 0xFF	; 255
     a4c:	ee cf       	rjmp	.-36     	; 0xa2a <puts+0x1c>
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	09 95       	icall
     a52:	89 2b       	or	r24, r25
     a54:	11 f4       	brne	.+4      	; 0xa5a <puts+0x4c>
     a56:	c8 01       	movw	r24, r16
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <puts+0x50>
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	9f ef       	ldi	r25, 0xFF	; 255
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	08 95       	ret

00000a68 <vfprintf>:
     a68:	ac e0       	ldi	r26, 0x0C	; 12
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ea e3       	ldi	r30, 0x3A	; 58
     a6e:	f5 e0       	ldi	r31, 0x05	; 5
     a70:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__prologue_saves__>
     a74:	7c 01       	movw	r14, r24
     a76:	6b 01       	movw	r12, r22
     a78:	8a 01       	movw	r16, r20
     a7a:	fc 01       	movw	r30, r24
     a7c:	17 82       	std	Z+7, r1	; 0x07
     a7e:	16 82       	std	Z+6, r1	; 0x06
     a80:	83 81       	ldd	r24, Z+3	; 0x03
     a82:	81 ff       	sbrs	r24, 1
     a84:	bd c1       	rjmp	.+890    	; 0xe00 <vfprintf+0x398>
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	4c 01       	movw	r8, r24
     a8c:	f7 01       	movw	r30, r14
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	f6 01       	movw	r30, r12
     a92:	93 fd       	sbrc	r25, 3
     a94:	85 91       	lpm	r24, Z+
     a96:	93 ff       	sbrs	r25, 3
     a98:	81 91       	ld	r24, Z+
     a9a:	6f 01       	movw	r12, r30
     a9c:	88 23       	and	r24, r24
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <vfprintf+0x3a>
     aa0:	ab c1       	rjmp	.+854    	; 0xdf8 <vfprintf+0x390>
     aa2:	85 32       	cpi	r24, 0x25	; 37
     aa4:	39 f4       	brne	.+14     	; 0xab4 <vfprintf+0x4c>
     aa6:	93 fd       	sbrc	r25, 3
     aa8:	85 91       	lpm	r24, Z+
     aaa:	93 ff       	sbrs	r25, 3
     aac:	81 91       	ld	r24, Z+
     aae:	6f 01       	movw	r12, r30
     ab0:	85 32       	cpi	r24, 0x25	; 37
     ab2:	29 f4       	brne	.+10     	; 0xabe <vfprintf+0x56>
     ab4:	b7 01       	movw	r22, r14
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     abc:	e7 cf       	rjmp	.-50     	; 0xa8c <vfprintf+0x24>
     abe:	51 2c       	mov	r5, r1
     ac0:	31 2c       	mov	r3, r1
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	20 32       	cpi	r18, 0x20	; 32
     ac6:	a0 f4       	brcc	.+40     	; 0xaf0 <vfprintf+0x88>
     ac8:	8b 32       	cpi	r24, 0x2B	; 43
     aca:	69 f0       	breq	.+26     	; 0xae6 <vfprintf+0x7e>
     acc:	30 f4       	brcc	.+12     	; 0xada <vfprintf+0x72>
     ace:	80 32       	cpi	r24, 0x20	; 32
     ad0:	59 f0       	breq	.+22     	; 0xae8 <vfprintf+0x80>
     ad2:	83 32       	cpi	r24, 0x23	; 35
     ad4:	69 f4       	brne	.+26     	; 0xaf0 <vfprintf+0x88>
     ad6:	20 61       	ori	r18, 0x10	; 16
     ad8:	2c c0       	rjmp	.+88     	; 0xb32 <vfprintf+0xca>
     ada:	8d 32       	cpi	r24, 0x2D	; 45
     adc:	39 f0       	breq	.+14     	; 0xaec <vfprintf+0x84>
     ade:	80 33       	cpi	r24, 0x30	; 48
     ae0:	39 f4       	brne	.+14     	; 0xaf0 <vfprintf+0x88>
     ae2:	21 60       	ori	r18, 0x01	; 1
     ae4:	26 c0       	rjmp	.+76     	; 0xb32 <vfprintf+0xca>
     ae6:	22 60       	ori	r18, 0x02	; 2
     ae8:	24 60       	ori	r18, 0x04	; 4
     aea:	23 c0       	rjmp	.+70     	; 0xb32 <vfprintf+0xca>
     aec:	28 60       	ori	r18, 0x08	; 8
     aee:	21 c0       	rjmp	.+66     	; 0xb32 <vfprintf+0xca>
     af0:	27 fd       	sbrc	r18, 7
     af2:	27 c0       	rjmp	.+78     	; 0xb42 <vfprintf+0xda>
     af4:	30 ed       	ldi	r19, 0xD0	; 208
     af6:	38 0f       	add	r19, r24
     af8:	3a 30       	cpi	r19, 0x0A	; 10
     afa:	78 f4       	brcc	.+30     	; 0xb1a <vfprintf+0xb2>
     afc:	26 ff       	sbrs	r18, 6
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <vfprintf+0xa4>
     b00:	fa e0       	ldi	r31, 0x0A	; 10
     b02:	5f 9e       	mul	r5, r31
     b04:	30 0d       	add	r19, r0
     b06:	11 24       	eor	r1, r1
     b08:	53 2e       	mov	r5, r19
     b0a:	13 c0       	rjmp	.+38     	; 0xb32 <vfprintf+0xca>
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	38 9e       	mul	r3, r24
     b10:	30 0d       	add	r19, r0
     b12:	11 24       	eor	r1, r1
     b14:	33 2e       	mov	r3, r19
     b16:	20 62       	ori	r18, 0x20	; 32
     b18:	0c c0       	rjmp	.+24     	; 0xb32 <vfprintf+0xca>
     b1a:	8e 32       	cpi	r24, 0x2E	; 46
     b1c:	21 f4       	brne	.+8      	; 0xb26 <vfprintf+0xbe>
     b1e:	26 fd       	sbrc	r18, 6
     b20:	6b c1       	rjmp	.+726    	; 0xdf8 <vfprintf+0x390>
     b22:	20 64       	ori	r18, 0x40	; 64
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <vfprintf+0xca>
     b26:	8c 36       	cpi	r24, 0x6C	; 108
     b28:	11 f4       	brne	.+4      	; 0xb2e <vfprintf+0xc6>
     b2a:	20 68       	ori	r18, 0x80	; 128
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <vfprintf+0xca>
     b2e:	88 36       	cpi	r24, 0x68	; 104
     b30:	41 f4       	brne	.+16     	; 0xb42 <vfprintf+0xda>
     b32:	f6 01       	movw	r30, r12
     b34:	93 fd       	sbrc	r25, 3
     b36:	85 91       	lpm	r24, Z+
     b38:	93 ff       	sbrs	r25, 3
     b3a:	81 91       	ld	r24, Z+
     b3c:	6f 01       	movw	r12, r30
     b3e:	81 11       	cpse	r24, r1
     b40:	c1 cf       	rjmp	.-126    	; 0xac4 <vfprintf+0x5c>
     b42:	98 2f       	mov	r25, r24
     b44:	9f 7d       	andi	r25, 0xDF	; 223
     b46:	95 54       	subi	r25, 0x45	; 69
     b48:	93 30       	cpi	r25, 0x03	; 3
     b4a:	28 f4       	brcc	.+10     	; 0xb56 <vfprintf+0xee>
     b4c:	0c 5f       	subi	r16, 0xFC	; 252
     b4e:	1f 4f       	sbci	r17, 0xFF	; 255
     b50:	ff e3       	ldi	r31, 0x3F	; 63
     b52:	f9 83       	std	Y+1, r31	; 0x01
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <vfprintf+0x108>
     b56:	83 36       	cpi	r24, 0x63	; 99
     b58:	31 f0       	breq	.+12     	; 0xb66 <vfprintf+0xfe>
     b5a:	83 37       	cpi	r24, 0x73	; 115
     b5c:	71 f0       	breq	.+28     	; 0xb7a <vfprintf+0x112>
     b5e:	83 35       	cpi	r24, 0x53	; 83
     b60:	09 f0       	breq	.+2      	; 0xb64 <vfprintf+0xfc>
     b62:	5b c0       	rjmp	.+182    	; 0xc1a <vfprintf+0x1b2>
     b64:	22 c0       	rjmp	.+68     	; 0xbaa <vfprintf+0x142>
     b66:	f8 01       	movw	r30, r16
     b68:	80 81       	ld	r24, Z
     b6a:	89 83       	std	Y+1, r24	; 0x01
     b6c:	0e 5f       	subi	r16, 0xFE	; 254
     b6e:	1f 4f       	sbci	r17, 0xFF	; 255
     b70:	44 24       	eor	r4, r4
     b72:	43 94       	inc	r4
     b74:	51 2c       	mov	r5, r1
     b76:	54 01       	movw	r10, r8
     b78:	15 c0       	rjmp	.+42     	; 0xba4 <vfprintf+0x13c>
     b7a:	38 01       	movw	r6, r16
     b7c:	f2 e0       	ldi	r31, 0x02	; 2
     b7e:	6f 0e       	add	r6, r31
     b80:	71 1c       	adc	r7, r1
     b82:	f8 01       	movw	r30, r16
     b84:	a0 80       	ld	r10, Z
     b86:	b1 80       	ldd	r11, Z+1	; 0x01
     b88:	26 ff       	sbrs	r18, 6
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <vfprintf+0x12a>
     b8c:	65 2d       	mov	r22, r5
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <vfprintf+0x12e>
     b92:	6f ef       	ldi	r22, 0xFF	; 255
     b94:	7f ef       	ldi	r23, 0xFF	; 255
     b96:	c5 01       	movw	r24, r10
     b98:	2c 87       	std	Y+12, r18	; 0x0c
     b9a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <strnlen>
     b9e:	2c 01       	movw	r4, r24
     ba0:	83 01       	movw	r16, r6
     ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ba4:	2f 77       	andi	r18, 0x7F	; 127
     ba6:	22 2e       	mov	r2, r18
     ba8:	17 c0       	rjmp	.+46     	; 0xbd8 <vfprintf+0x170>
     baa:	38 01       	movw	r6, r16
     bac:	f2 e0       	ldi	r31, 0x02	; 2
     bae:	6f 0e       	add	r6, r31
     bb0:	71 1c       	adc	r7, r1
     bb2:	f8 01       	movw	r30, r16
     bb4:	a0 80       	ld	r10, Z
     bb6:	b1 80       	ldd	r11, Z+1	; 0x01
     bb8:	26 ff       	sbrs	r18, 6
     bba:	03 c0       	rjmp	.+6      	; 0xbc2 <vfprintf+0x15a>
     bbc:	65 2d       	mov	r22, r5
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <vfprintf+0x15e>
     bc2:	6f ef       	ldi	r22, 0xFF	; 255
     bc4:	7f ef       	ldi	r23, 0xFF	; 255
     bc6:	c5 01       	movw	r24, r10
     bc8:	2c 87       	std	Y+12, r18	; 0x0c
     bca:	0e 94 49 08 	call	0x1092	; 0x1092 <strnlen_P>
     bce:	2c 01       	movw	r4, r24
     bd0:	2c 85       	ldd	r18, Y+12	; 0x0c
     bd2:	20 68       	ori	r18, 0x80	; 128
     bd4:	22 2e       	mov	r2, r18
     bd6:	83 01       	movw	r16, r6
     bd8:	23 fc       	sbrc	r2, 3
     bda:	1b c0       	rjmp	.+54     	; 0xc12 <vfprintf+0x1aa>
     bdc:	83 2d       	mov	r24, r3
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	48 16       	cp	r4, r24
     be2:	59 06       	cpc	r5, r25
     be4:	b0 f4       	brcc	.+44     	; 0xc12 <vfprintf+0x1aa>
     be6:	b7 01       	movw	r22, r14
     be8:	80 e2       	ldi	r24, 0x20	; 32
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     bf0:	3a 94       	dec	r3
     bf2:	f4 cf       	rjmp	.-24     	; 0xbdc <vfprintf+0x174>
     bf4:	f5 01       	movw	r30, r10
     bf6:	27 fc       	sbrc	r2, 7
     bf8:	85 91       	lpm	r24, Z+
     bfa:	27 fe       	sbrs	r2, 7
     bfc:	81 91       	ld	r24, Z+
     bfe:	5f 01       	movw	r10, r30
     c00:	b7 01       	movw	r22, r14
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     c08:	31 10       	cpse	r3, r1
     c0a:	3a 94       	dec	r3
     c0c:	f1 e0       	ldi	r31, 0x01	; 1
     c0e:	4f 1a       	sub	r4, r31
     c10:	51 08       	sbc	r5, r1
     c12:	41 14       	cp	r4, r1
     c14:	51 04       	cpc	r5, r1
     c16:	71 f7       	brne	.-36     	; 0xbf4 <vfprintf+0x18c>
     c18:	e5 c0       	rjmp	.+458    	; 0xde4 <vfprintf+0x37c>
     c1a:	84 36       	cpi	r24, 0x64	; 100
     c1c:	11 f0       	breq	.+4      	; 0xc22 <vfprintf+0x1ba>
     c1e:	89 36       	cpi	r24, 0x69	; 105
     c20:	39 f5       	brne	.+78     	; 0xc70 <vfprintf+0x208>
     c22:	f8 01       	movw	r30, r16
     c24:	27 ff       	sbrs	r18, 7
     c26:	07 c0       	rjmp	.+14     	; 0xc36 <vfprintf+0x1ce>
     c28:	60 81       	ld	r22, Z
     c2a:	71 81       	ldd	r23, Z+1	; 0x01
     c2c:	82 81       	ldd	r24, Z+2	; 0x02
     c2e:	93 81       	ldd	r25, Z+3	; 0x03
     c30:	0c 5f       	subi	r16, 0xFC	; 252
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <vfprintf+0x1de>
     c36:	60 81       	ld	r22, Z
     c38:	71 81       	ldd	r23, Z+1	; 0x01
     c3a:	88 27       	eor	r24, r24
     c3c:	77 fd       	sbrc	r23, 7
     c3e:	80 95       	com	r24
     c40:	98 2f       	mov	r25, r24
     c42:	0e 5f       	subi	r16, 0xFE	; 254
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	2f 76       	andi	r18, 0x6F	; 111
     c48:	b2 2e       	mov	r11, r18
     c4a:	97 ff       	sbrs	r25, 7
     c4c:	09 c0       	rjmp	.+18     	; 0xc60 <vfprintf+0x1f8>
     c4e:	90 95       	com	r25
     c50:	80 95       	com	r24
     c52:	70 95       	com	r23
     c54:	61 95       	neg	r22
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	8f 4f       	sbci	r24, 0xFF	; 255
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	20 68       	ori	r18, 0x80	; 128
     c5e:	b2 2e       	mov	r11, r18
     c60:	2a e0       	ldi	r18, 0x0A	; 10
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	a4 01       	movw	r20, r8
     c66:	0e 94 98 08 	call	0x1130	; 0x1130 <__ultoa_invert>
     c6a:	a8 2e       	mov	r10, r24
     c6c:	a8 18       	sub	r10, r8
     c6e:	44 c0       	rjmp	.+136    	; 0xcf8 <vfprintf+0x290>
     c70:	85 37       	cpi	r24, 0x75	; 117
     c72:	29 f4       	brne	.+10     	; 0xc7e <vfprintf+0x216>
     c74:	2f 7e       	andi	r18, 0xEF	; 239
     c76:	b2 2e       	mov	r11, r18
     c78:	2a e0       	ldi	r18, 0x0A	; 10
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	25 c0       	rjmp	.+74     	; 0xcc8 <vfprintf+0x260>
     c7e:	f2 2f       	mov	r31, r18
     c80:	f9 7f       	andi	r31, 0xF9	; 249
     c82:	bf 2e       	mov	r11, r31
     c84:	8f 36       	cpi	r24, 0x6F	; 111
     c86:	c1 f0       	breq	.+48     	; 0xcb8 <vfprintf+0x250>
     c88:	18 f4       	brcc	.+6      	; 0xc90 <vfprintf+0x228>
     c8a:	88 35       	cpi	r24, 0x58	; 88
     c8c:	79 f0       	breq	.+30     	; 0xcac <vfprintf+0x244>
     c8e:	b4 c0       	rjmp	.+360    	; 0xdf8 <vfprintf+0x390>
     c90:	80 37       	cpi	r24, 0x70	; 112
     c92:	19 f0       	breq	.+6      	; 0xc9a <vfprintf+0x232>
     c94:	88 37       	cpi	r24, 0x78	; 120
     c96:	21 f0       	breq	.+8      	; 0xca0 <vfprintf+0x238>
     c98:	af c0       	rjmp	.+350    	; 0xdf8 <vfprintf+0x390>
     c9a:	2f 2f       	mov	r18, r31
     c9c:	20 61       	ori	r18, 0x10	; 16
     c9e:	b2 2e       	mov	r11, r18
     ca0:	b4 fe       	sbrs	r11, 4
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <vfprintf+0x256>
     ca4:	8b 2d       	mov	r24, r11
     ca6:	84 60       	ori	r24, 0x04	; 4
     ca8:	b8 2e       	mov	r11, r24
     caa:	09 c0       	rjmp	.+18     	; 0xcbe <vfprintf+0x256>
     cac:	24 ff       	sbrs	r18, 4
     cae:	0a c0       	rjmp	.+20     	; 0xcc4 <vfprintf+0x25c>
     cb0:	9f 2f       	mov	r25, r31
     cb2:	96 60       	ori	r25, 0x06	; 6
     cb4:	b9 2e       	mov	r11, r25
     cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <vfprintf+0x25c>
     cb8:	28 e0       	ldi	r18, 0x08	; 8
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <vfprintf+0x260>
     cbe:	20 e1       	ldi	r18, 0x10	; 16
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <vfprintf+0x260>
     cc4:	20 e1       	ldi	r18, 0x10	; 16
     cc6:	32 e0       	ldi	r19, 0x02	; 2
     cc8:	f8 01       	movw	r30, r16
     cca:	b7 fe       	sbrs	r11, 7
     ccc:	07 c0       	rjmp	.+14     	; 0xcdc <vfprintf+0x274>
     cce:	60 81       	ld	r22, Z
     cd0:	71 81       	ldd	r23, Z+1	; 0x01
     cd2:	82 81       	ldd	r24, Z+2	; 0x02
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	0c 5f       	subi	r16, 0xFC	; 252
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <vfprintf+0x280>
     cdc:	60 81       	ld	r22, Z
     cde:	71 81       	ldd	r23, Z+1	; 0x01
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 5f       	subi	r16, 0xFE	; 254
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	a4 01       	movw	r20, r8
     cea:	0e 94 98 08 	call	0x1130	; 0x1130 <__ultoa_invert>
     cee:	a8 2e       	mov	r10, r24
     cf0:	a8 18       	sub	r10, r8
     cf2:	fb 2d       	mov	r31, r11
     cf4:	ff 77       	andi	r31, 0x7F	; 127
     cf6:	bf 2e       	mov	r11, r31
     cf8:	b6 fe       	sbrs	r11, 6
     cfa:	0b c0       	rjmp	.+22     	; 0xd12 <vfprintf+0x2aa>
     cfc:	2b 2d       	mov	r18, r11
     cfe:	2e 7f       	andi	r18, 0xFE	; 254
     d00:	a5 14       	cp	r10, r5
     d02:	50 f4       	brcc	.+20     	; 0xd18 <vfprintf+0x2b0>
     d04:	b4 fe       	sbrs	r11, 4
     d06:	0a c0       	rjmp	.+20     	; 0xd1c <vfprintf+0x2b4>
     d08:	b2 fc       	sbrc	r11, 2
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <vfprintf+0x2b4>
     d0c:	2b 2d       	mov	r18, r11
     d0e:	2e 7e       	andi	r18, 0xEE	; 238
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <vfprintf+0x2b4>
     d12:	7a 2c       	mov	r7, r10
     d14:	2b 2d       	mov	r18, r11
     d16:	03 c0       	rjmp	.+6      	; 0xd1e <vfprintf+0x2b6>
     d18:	7a 2c       	mov	r7, r10
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <vfprintf+0x2b6>
     d1c:	75 2c       	mov	r7, r5
     d1e:	24 ff       	sbrs	r18, 4
     d20:	0d c0       	rjmp	.+26     	; 0xd3c <vfprintf+0x2d4>
     d22:	fe 01       	movw	r30, r28
     d24:	ea 0d       	add	r30, r10
     d26:	f1 1d       	adc	r31, r1
     d28:	80 81       	ld	r24, Z
     d2a:	80 33       	cpi	r24, 0x30	; 48
     d2c:	11 f4       	brne	.+4      	; 0xd32 <vfprintf+0x2ca>
     d2e:	29 7e       	andi	r18, 0xE9	; 233
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <vfprintf+0x2dc>
     d32:	22 ff       	sbrs	r18, 2
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <vfprintf+0x2da>
     d36:	73 94       	inc	r7
     d38:	73 94       	inc	r7
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <vfprintf+0x2dc>
     d3c:	82 2f       	mov	r24, r18
     d3e:	86 78       	andi	r24, 0x86	; 134
     d40:	09 f0       	breq	.+2      	; 0xd44 <vfprintf+0x2dc>
     d42:	73 94       	inc	r7
     d44:	23 fd       	sbrc	r18, 3
     d46:	13 c0       	rjmp	.+38     	; 0xd6e <vfprintf+0x306>
     d48:	20 ff       	sbrs	r18, 0
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0x2f0>
     d4c:	5a 2c       	mov	r5, r10
     d4e:	73 14       	cp	r7, r3
     d50:	18 f4       	brcc	.+6      	; 0xd58 <vfprintf+0x2f0>
     d52:	53 0c       	add	r5, r3
     d54:	57 18       	sub	r5, r7
     d56:	73 2c       	mov	r7, r3
     d58:	73 14       	cp	r7, r3
     d5a:	68 f4       	brcc	.+26     	; 0xd76 <vfprintf+0x30e>
     d5c:	b7 01       	movw	r22, r14
     d5e:	80 e2       	ldi	r24, 0x20	; 32
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	2c 87       	std	Y+12, r18	; 0x0c
     d64:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     d68:	73 94       	inc	r7
     d6a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d6c:	f5 cf       	rjmp	.-22     	; 0xd58 <vfprintf+0x2f0>
     d6e:	73 14       	cp	r7, r3
     d70:	10 f4       	brcc	.+4      	; 0xd76 <vfprintf+0x30e>
     d72:	37 18       	sub	r3, r7
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <vfprintf+0x310>
     d76:	31 2c       	mov	r3, r1
     d78:	24 ff       	sbrs	r18, 4
     d7a:	12 c0       	rjmp	.+36     	; 0xda0 <vfprintf+0x338>
     d7c:	b7 01       	movw	r22, r14
     d7e:	80 e3       	ldi	r24, 0x30	; 48
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	2c 87       	std	Y+12, r18	; 0x0c
     d84:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     d88:	2c 85       	ldd	r18, Y+12	; 0x0c
     d8a:	22 ff       	sbrs	r18, 2
     d8c:	17 c0       	rjmp	.+46     	; 0xdbc <vfprintf+0x354>
     d8e:	21 ff       	sbrs	r18, 1
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <vfprintf+0x330>
     d92:	88 e5       	ldi	r24, 0x58	; 88
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x334>
     d98:	88 e7       	ldi	r24, 0x78	; 120
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	b7 01       	movw	r22, r14
     d9e:	0c c0       	rjmp	.+24     	; 0xdb8 <vfprintf+0x350>
     da0:	82 2f       	mov	r24, r18
     da2:	86 78       	andi	r24, 0x86	; 134
     da4:	59 f0       	breq	.+22     	; 0xdbc <vfprintf+0x354>
     da6:	21 fd       	sbrc	r18, 1
     da8:	02 c0       	rjmp	.+4      	; 0xdae <vfprintf+0x346>
     daa:	80 e2       	ldi	r24, 0x20	; 32
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <vfprintf+0x348>
     dae:	8b e2       	ldi	r24, 0x2B	; 43
     db0:	27 fd       	sbrc	r18, 7
     db2:	8d e2       	ldi	r24, 0x2D	; 45
     db4:	b7 01       	movw	r22, r14
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     dbc:	a5 14       	cp	r10, r5
     dbe:	38 f4       	brcc	.+14     	; 0xdce <vfprintf+0x366>
     dc0:	b7 01       	movw	r22, r14
     dc2:	80 e3       	ldi	r24, 0x30	; 48
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     dca:	5a 94       	dec	r5
     dcc:	f7 cf       	rjmp	.-18     	; 0xdbc <vfprintf+0x354>
     dce:	aa 94       	dec	r10
     dd0:	f4 01       	movw	r30, r8
     dd2:	ea 0d       	add	r30, r10
     dd4:	f1 1d       	adc	r31, r1
     dd6:	80 81       	ld	r24, Z
     dd8:	b7 01       	movw	r22, r14
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     de0:	a1 10       	cpse	r10, r1
     de2:	f5 cf       	rjmp	.-22     	; 0xdce <vfprintf+0x366>
     de4:	33 20       	and	r3, r3
     de6:	09 f4       	brne	.+2      	; 0xdea <vfprintf+0x382>
     de8:	51 ce       	rjmp	.-862    	; 0xa8c <vfprintf+0x24>
     dea:	b7 01       	movw	r22, r14
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 66 08 	call	0x10cc	; 0x10cc <fputc>
     df4:	3a 94       	dec	r3
     df6:	f6 cf       	rjmp	.-20     	; 0xde4 <vfprintf+0x37c>
     df8:	f7 01       	movw	r30, r14
     dfa:	86 81       	ldd	r24, Z+6	; 0x06
     dfc:	97 81       	ldd	r25, Z+7	; 0x07
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x39c>
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	2c 96       	adiw	r28, 0x0c	; 12
     e06:	e2 e1       	ldi	r30, 0x12	; 18
     e08:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__epilogue_restores__>

00000e0c <calloc>:
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	86 9f       	mul	r24, r22
     e16:	80 01       	movw	r16, r0
     e18:	87 9f       	mul	r24, r23
     e1a:	10 0d       	add	r17, r0
     e1c:	96 9f       	mul	r25, r22
     e1e:	10 0d       	add	r17, r0
     e20:	11 24       	eor	r1, r1
     e22:	c8 01       	movw	r24, r16
     e24:	0e 94 22 07 	call	0xe44	; 0xe44 <malloc>
     e28:	ec 01       	movw	r28, r24
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	29 f0       	breq	.+10     	; 0xe38 <calloc+0x2c>
     e2e:	a8 01       	movw	r20, r16
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	0e 94 54 08 	call	0x10a8	; 0x10a8 <memset>
     e38:	ce 01       	movw	r24, r28
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <malloc>:
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	91 05       	cpc	r25, r1
     e4c:	10 f4       	brcc	.+4      	; 0xe52 <malloc+0xe>
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	e0 91 44 02 	lds	r30, 0x0244
     e56:	f0 91 45 02 	lds	r31, 0x0245
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	a0 e0       	ldi	r26, 0x00	; 0
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	30 97       	sbiw	r30, 0x00	; 0
     e64:	39 f1       	breq	.+78     	; 0xeb4 <malloc+0x70>
     e66:	40 81       	ld	r20, Z
     e68:	51 81       	ldd	r21, Z+1	; 0x01
     e6a:	48 17       	cp	r20, r24
     e6c:	59 07       	cpc	r21, r25
     e6e:	b8 f0       	brcs	.+46     	; 0xe9e <malloc+0x5a>
     e70:	48 17       	cp	r20, r24
     e72:	59 07       	cpc	r21, r25
     e74:	71 f4       	brne	.+28     	; 0xe92 <malloc+0x4e>
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	10 97       	sbiw	r26, 0x00	; 0
     e7c:	29 f0       	breq	.+10     	; 0xe88 <malloc+0x44>
     e7e:	13 96       	adiw	r26, 0x03	; 3
     e80:	9c 93       	st	X, r25
     e82:	8e 93       	st	-X, r24
     e84:	12 97       	sbiw	r26, 0x02	; 2
     e86:	2c c0       	rjmp	.+88     	; 0xee0 <malloc+0x9c>
     e88:	90 93 45 02 	sts	0x0245, r25
     e8c:	80 93 44 02 	sts	0x0244, r24
     e90:	27 c0       	rjmp	.+78     	; 0xee0 <malloc+0x9c>
     e92:	21 15       	cp	r18, r1
     e94:	31 05       	cpc	r19, r1
     e96:	31 f0       	breq	.+12     	; 0xea4 <malloc+0x60>
     e98:	42 17       	cp	r20, r18
     e9a:	53 07       	cpc	r21, r19
     e9c:	18 f0       	brcs	.+6      	; 0xea4 <malloc+0x60>
     e9e:	a9 01       	movw	r20, r18
     ea0:	db 01       	movw	r26, r22
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <malloc+0x62>
     ea4:	ef 01       	movw	r28, r30
     ea6:	9a 01       	movw	r18, r20
     ea8:	bd 01       	movw	r22, r26
     eaa:	df 01       	movw	r26, r30
     eac:	02 80       	ldd	r0, Z+2	; 0x02
     eae:	f3 81       	ldd	r31, Z+3	; 0x03
     eb0:	e0 2d       	mov	r30, r0
     eb2:	d7 cf       	rjmp	.-82     	; 0xe62 <malloc+0x1e>
     eb4:	21 15       	cp	r18, r1
     eb6:	31 05       	cpc	r19, r1
     eb8:	f9 f0       	breq	.+62     	; 0xef8 <malloc+0xb4>
     eba:	28 1b       	sub	r18, r24
     ebc:	39 0b       	sbc	r19, r25
     ebe:	24 30       	cpi	r18, 0x04	; 4
     ec0:	31 05       	cpc	r19, r1
     ec2:	80 f4       	brcc	.+32     	; 0xee4 <malloc+0xa0>
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	9b 81       	ldd	r25, Y+3	; 0x03
     ec8:	61 15       	cp	r22, r1
     eca:	71 05       	cpc	r23, r1
     ecc:	21 f0       	breq	.+8      	; 0xed6 <malloc+0x92>
     ece:	fb 01       	movw	r30, r22
     ed0:	93 83       	std	Z+3, r25	; 0x03
     ed2:	82 83       	std	Z+2, r24	; 0x02
     ed4:	04 c0       	rjmp	.+8      	; 0xede <malloc+0x9a>
     ed6:	90 93 45 02 	sts	0x0245, r25
     eda:	80 93 44 02 	sts	0x0244, r24
     ede:	fe 01       	movw	r30, r28
     ee0:	32 96       	adiw	r30, 0x02	; 2
     ee2:	44 c0       	rjmp	.+136    	; 0xf6c <malloc+0x128>
     ee4:	fe 01       	movw	r30, r28
     ee6:	e2 0f       	add	r30, r18
     ee8:	f3 1f       	adc	r31, r19
     eea:	81 93       	st	Z+, r24
     eec:	91 93       	st	Z+, r25
     eee:	22 50       	subi	r18, 0x02	; 2
     ef0:	31 09       	sbc	r19, r1
     ef2:	39 83       	std	Y+1, r19	; 0x01
     ef4:	28 83       	st	Y, r18
     ef6:	3a c0       	rjmp	.+116    	; 0xf6c <malloc+0x128>
     ef8:	20 91 42 02 	lds	r18, 0x0242
     efc:	30 91 43 02 	lds	r19, 0x0243
     f00:	23 2b       	or	r18, r19
     f02:	41 f4       	brne	.+16     	; 0xf14 <malloc+0xd0>
     f04:	20 91 06 01 	lds	r18, 0x0106
     f08:	30 91 07 01 	lds	r19, 0x0107
     f0c:	30 93 43 02 	sts	0x0243, r19
     f10:	20 93 42 02 	sts	0x0242, r18
     f14:	20 91 04 01 	lds	r18, 0x0104
     f18:	30 91 05 01 	lds	r19, 0x0105
     f1c:	21 15       	cp	r18, r1
     f1e:	31 05       	cpc	r19, r1
     f20:	41 f4       	brne	.+16     	; 0xf32 <malloc+0xee>
     f22:	2d b7       	in	r18, 0x3d	; 61
     f24:	3e b7       	in	r19, 0x3e	; 62
     f26:	40 91 08 01 	lds	r20, 0x0108
     f2a:	50 91 09 01 	lds	r21, 0x0109
     f2e:	24 1b       	sub	r18, r20
     f30:	35 0b       	sbc	r19, r21
     f32:	e0 91 42 02 	lds	r30, 0x0242
     f36:	f0 91 43 02 	lds	r31, 0x0243
     f3a:	e2 17       	cp	r30, r18
     f3c:	f3 07       	cpc	r31, r19
     f3e:	a0 f4       	brcc	.+40     	; 0xf68 <malloc+0x124>
     f40:	2e 1b       	sub	r18, r30
     f42:	3f 0b       	sbc	r19, r31
     f44:	28 17       	cp	r18, r24
     f46:	39 07       	cpc	r19, r25
     f48:	78 f0       	brcs	.+30     	; 0xf68 <malloc+0x124>
     f4a:	ac 01       	movw	r20, r24
     f4c:	4e 5f       	subi	r20, 0xFE	; 254
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	24 17       	cp	r18, r20
     f52:	35 07       	cpc	r19, r21
     f54:	48 f0       	brcs	.+18     	; 0xf68 <malloc+0x124>
     f56:	4e 0f       	add	r20, r30
     f58:	5f 1f       	adc	r21, r31
     f5a:	50 93 43 02 	sts	0x0243, r21
     f5e:	40 93 42 02 	sts	0x0242, r20
     f62:	81 93       	st	Z+, r24
     f64:	91 93       	st	Z+, r25
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <malloc+0x128>
     f68:	e0 e0       	ldi	r30, 0x00	; 0
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	cf 01       	movw	r24, r30
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <free>:
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	09 f4       	brne	.+2      	; 0xf7e <free+0xa>
     f7c:	87 c0       	rjmp	.+270    	; 0x108c <free+0x118>
     f7e:	fc 01       	movw	r30, r24
     f80:	32 97       	sbiw	r30, 0x02	; 2
     f82:	13 82       	std	Z+3, r1	; 0x03
     f84:	12 82       	std	Z+2, r1	; 0x02
     f86:	c0 91 44 02 	lds	r28, 0x0244
     f8a:	d0 91 45 02 	lds	r29, 0x0245
     f8e:	20 97       	sbiw	r28, 0x00	; 0
     f90:	81 f4       	brne	.+32     	; 0xfb2 <free+0x3e>
     f92:	20 81       	ld	r18, Z
     f94:	31 81       	ldd	r19, Z+1	; 0x01
     f96:	28 0f       	add	r18, r24
     f98:	39 1f       	adc	r19, r25
     f9a:	80 91 42 02 	lds	r24, 0x0242
     f9e:	90 91 43 02 	lds	r25, 0x0243
     fa2:	82 17       	cp	r24, r18
     fa4:	93 07       	cpc	r25, r19
     fa6:	79 f5       	brne	.+94     	; 0x1006 <free+0x92>
     fa8:	f0 93 43 02 	sts	0x0243, r31
     fac:	e0 93 42 02 	sts	0x0242, r30
     fb0:	6d c0       	rjmp	.+218    	; 0x108c <free+0x118>
     fb2:	de 01       	movw	r26, r28
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	ae 17       	cp	r26, r30
     fba:	bf 07       	cpc	r27, r31
     fbc:	50 f4       	brcc	.+20     	; 0xfd2 <free+0x5e>
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	4d 91       	ld	r20, X+
     fc2:	5c 91       	ld	r21, X
     fc4:	13 97       	sbiw	r26, 0x03	; 3
     fc6:	9d 01       	movw	r18, r26
     fc8:	41 15       	cp	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	09 f1       	breq	.+66     	; 0x1010 <free+0x9c>
     fce:	da 01       	movw	r26, r20
     fd0:	f3 cf       	rjmp	.-26     	; 0xfb8 <free+0x44>
     fd2:	b3 83       	std	Z+3, r27	; 0x03
     fd4:	a2 83       	std	Z+2, r26	; 0x02
     fd6:	40 81       	ld	r20, Z
     fd8:	51 81       	ldd	r21, Z+1	; 0x01
     fda:	84 0f       	add	r24, r20
     fdc:	95 1f       	adc	r25, r21
     fde:	8a 17       	cp	r24, r26
     fe0:	9b 07       	cpc	r25, r27
     fe2:	71 f4       	brne	.+28     	; 0x1000 <free+0x8c>
     fe4:	8d 91       	ld	r24, X+
     fe6:	9c 91       	ld	r25, X
     fe8:	11 97       	sbiw	r26, 0x01	; 1
     fea:	84 0f       	add	r24, r20
     fec:	95 1f       	adc	r25, r21
     fee:	02 96       	adiw	r24, 0x02	; 2
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
     ff4:	12 96       	adiw	r26, 0x02	; 2
     ff6:	8d 91       	ld	r24, X+
     ff8:	9c 91       	ld	r25, X
     ffa:	13 97       	sbiw	r26, 0x03	; 3
     ffc:	93 83       	std	Z+3, r25	; 0x03
     ffe:	82 83       	std	Z+2, r24	; 0x02
    1000:	21 15       	cp	r18, r1
    1002:	31 05       	cpc	r19, r1
    1004:	29 f4       	brne	.+10     	; 0x1010 <free+0x9c>
    1006:	f0 93 45 02 	sts	0x0245, r31
    100a:	e0 93 44 02 	sts	0x0244, r30
    100e:	3e c0       	rjmp	.+124    	; 0x108c <free+0x118>
    1010:	d9 01       	movw	r26, r18
    1012:	13 96       	adiw	r26, 0x03	; 3
    1014:	fc 93       	st	X, r31
    1016:	ee 93       	st	-X, r30
    1018:	12 97       	sbiw	r26, 0x02	; 2
    101a:	4d 91       	ld	r20, X+
    101c:	5d 91       	ld	r21, X+
    101e:	a4 0f       	add	r26, r20
    1020:	b5 1f       	adc	r27, r21
    1022:	ea 17       	cp	r30, r26
    1024:	fb 07       	cpc	r31, r27
    1026:	79 f4       	brne	.+30     	; 0x1046 <free+0xd2>
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	84 0f       	add	r24, r20
    102e:	95 1f       	adc	r25, r21
    1030:	02 96       	adiw	r24, 0x02	; 2
    1032:	d9 01       	movw	r26, r18
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	13 96       	adiw	r26, 0x03	; 3
    1040:	9c 93       	st	X, r25
    1042:	8e 93       	st	-X, r24
    1044:	12 97       	sbiw	r26, 0x02	; 2
    1046:	e0 e0       	ldi	r30, 0x00	; 0
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	19 f0       	breq	.+6      	; 0x1058 <free+0xe4>
    1052:	fe 01       	movw	r30, r28
    1054:	ec 01       	movw	r28, r24
    1056:	f9 cf       	rjmp	.-14     	; 0x104a <free+0xd6>
    1058:	ce 01       	movw	r24, r28
    105a:	02 96       	adiw	r24, 0x02	; 2
    105c:	28 81       	ld	r18, Y
    105e:	39 81       	ldd	r19, Y+1	; 0x01
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	20 91 42 02 	lds	r18, 0x0242
    1068:	30 91 43 02 	lds	r19, 0x0243
    106c:	28 17       	cp	r18, r24
    106e:	39 07       	cpc	r19, r25
    1070:	69 f4       	brne	.+26     	; 0x108c <free+0x118>
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	29 f4       	brne	.+10     	; 0x1080 <free+0x10c>
    1076:	10 92 45 02 	sts	0x0245, r1
    107a:	10 92 44 02 	sts	0x0244, r1
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <free+0x110>
    1080:	13 82       	std	Z+3, r1	; 0x03
    1082:	12 82       	std	Z+2, r1	; 0x02
    1084:	d0 93 43 02 	sts	0x0243, r29
    1088:	c0 93 42 02 	sts	0x0242, r28
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <strnlen_P>:
    1092:	fc 01       	movw	r30, r24
    1094:	05 90       	lpm	r0, Z+
    1096:	61 50       	subi	r22, 0x01	; 1
    1098:	70 40       	sbci	r23, 0x00	; 0
    109a:	01 10       	cpse	r0, r1
    109c:	d8 f7       	brcc	.-10     	; 0x1094 <strnlen_P+0x2>
    109e:	80 95       	com	r24
    10a0:	90 95       	com	r25
    10a2:	8e 0f       	add	r24, r30
    10a4:	9f 1f       	adc	r25, r31
    10a6:	08 95       	ret

000010a8 <memset>:
    10a8:	dc 01       	movw	r26, r24
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <memset+0x6>
    10ac:	6d 93       	st	X+, r22
    10ae:	41 50       	subi	r20, 0x01	; 1
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	e0 f7       	brcc	.-8      	; 0x10ac <memset+0x4>
    10b4:	08 95       	ret

000010b6 <strnlen>:
    10b6:	fc 01       	movw	r30, r24
    10b8:	61 50       	subi	r22, 0x01	; 1
    10ba:	70 40       	sbci	r23, 0x00	; 0
    10bc:	01 90       	ld	r0, Z+
    10be:	01 10       	cpse	r0, r1
    10c0:	d8 f7       	brcc	.-10     	; 0x10b8 <strnlen+0x2>
    10c2:	80 95       	com	r24
    10c4:	90 95       	com	r25
    10c6:	8e 0f       	add	r24, r30
    10c8:	9f 1f       	adc	r25, r31
    10ca:	08 95       	ret

000010cc <fputc>:
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	18 2f       	mov	r17, r24
    10d6:	09 2f       	mov	r16, r25
    10d8:	eb 01       	movw	r28, r22
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	81 fd       	sbrc	r24, 1
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <fputc+0x1a>
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	20 c0       	rjmp	.+64     	; 0x1126 <fputc+0x5a>
    10e6:	82 ff       	sbrs	r24, 2
    10e8:	10 c0       	rjmp	.+32     	; 0x110a <fputc+0x3e>
    10ea:	4e 81       	ldd	r20, Y+6	; 0x06
    10ec:	5f 81       	ldd	r21, Y+7	; 0x07
    10ee:	2c 81       	ldd	r18, Y+4	; 0x04
    10f0:	3d 81       	ldd	r19, Y+5	; 0x05
    10f2:	42 17       	cp	r20, r18
    10f4:	53 07       	cpc	r21, r19
    10f6:	7c f4       	brge	.+30     	; 0x1116 <fputc+0x4a>
    10f8:	e8 81       	ld	r30, Y
    10fa:	f9 81       	ldd	r31, Y+1	; 0x01
    10fc:	9f 01       	movw	r18, r30
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	39 83       	std	Y+1, r19	; 0x01
    1104:	28 83       	st	Y, r18
    1106:	10 83       	st	Z, r17
    1108:	06 c0       	rjmp	.+12     	; 0x1116 <fputc+0x4a>
    110a:	e8 85       	ldd	r30, Y+8	; 0x08
    110c:	f9 85       	ldd	r31, Y+9	; 0x09
    110e:	81 2f       	mov	r24, r17
    1110:	09 95       	icall
    1112:	89 2b       	or	r24, r25
    1114:	29 f7       	brne	.-54     	; 0x10e0 <fputc+0x14>
    1116:	2e 81       	ldd	r18, Y+6	; 0x06
    1118:	3f 81       	ldd	r19, Y+7	; 0x07
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	3f 83       	std	Y+7, r19	; 0x07
    1120:	2e 83       	std	Y+6, r18	; 0x06
    1122:	81 2f       	mov	r24, r17
    1124:	90 2f       	mov	r25, r16
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <__ultoa_invert>:
    1130:	fa 01       	movw	r30, r20
    1132:	aa 27       	eor	r26, r26
    1134:	28 30       	cpi	r18, 0x08	; 8
    1136:	51 f1       	breq	.+84     	; 0x118c <__ultoa_invert+0x5c>
    1138:	20 31       	cpi	r18, 0x10	; 16
    113a:	81 f1       	breq	.+96     	; 0x119c <__ultoa_invert+0x6c>
    113c:	e8 94       	clt
    113e:	6f 93       	push	r22
    1140:	6e 7f       	andi	r22, 0xFE	; 254
    1142:	6e 5f       	subi	r22, 0xFE	; 254
    1144:	7f 4f       	sbci	r23, 0xFF	; 255
    1146:	8f 4f       	sbci	r24, 0xFF	; 255
    1148:	9f 4f       	sbci	r25, 0xFF	; 255
    114a:	af 4f       	sbci	r26, 0xFF	; 255
    114c:	b1 e0       	ldi	r27, 0x01	; 1
    114e:	3e d0       	rcall	.+124    	; 0x11cc <__ultoa_invert+0x9c>
    1150:	b4 e0       	ldi	r27, 0x04	; 4
    1152:	3c d0       	rcall	.+120    	; 0x11cc <__ultoa_invert+0x9c>
    1154:	67 0f       	add	r22, r23
    1156:	78 1f       	adc	r23, r24
    1158:	89 1f       	adc	r24, r25
    115a:	9a 1f       	adc	r25, r26
    115c:	a1 1d       	adc	r26, r1
    115e:	68 0f       	add	r22, r24
    1160:	79 1f       	adc	r23, r25
    1162:	8a 1f       	adc	r24, r26
    1164:	91 1d       	adc	r25, r1
    1166:	a1 1d       	adc	r26, r1
    1168:	6a 0f       	add	r22, r26
    116a:	71 1d       	adc	r23, r1
    116c:	81 1d       	adc	r24, r1
    116e:	91 1d       	adc	r25, r1
    1170:	a1 1d       	adc	r26, r1
    1172:	20 d0       	rcall	.+64     	; 0x11b4 <__ultoa_invert+0x84>
    1174:	09 f4       	brne	.+2      	; 0x1178 <__ultoa_invert+0x48>
    1176:	68 94       	set
    1178:	3f 91       	pop	r19
    117a:	2a e0       	ldi	r18, 0x0A	; 10
    117c:	26 9f       	mul	r18, r22
    117e:	11 24       	eor	r1, r1
    1180:	30 19       	sub	r19, r0
    1182:	30 5d       	subi	r19, 0xD0	; 208
    1184:	31 93       	st	Z+, r19
    1186:	de f6       	brtc	.-74     	; 0x113e <__ultoa_invert+0xe>
    1188:	cf 01       	movw	r24, r30
    118a:	08 95       	ret
    118c:	46 2f       	mov	r20, r22
    118e:	47 70       	andi	r20, 0x07	; 7
    1190:	40 5d       	subi	r20, 0xD0	; 208
    1192:	41 93       	st	Z+, r20
    1194:	b3 e0       	ldi	r27, 0x03	; 3
    1196:	0f d0       	rcall	.+30     	; 0x11b6 <__ultoa_invert+0x86>
    1198:	c9 f7       	brne	.-14     	; 0x118c <__ultoa_invert+0x5c>
    119a:	f6 cf       	rjmp	.-20     	; 0x1188 <__ultoa_invert+0x58>
    119c:	46 2f       	mov	r20, r22
    119e:	4f 70       	andi	r20, 0x0F	; 15
    11a0:	40 5d       	subi	r20, 0xD0	; 208
    11a2:	4a 33       	cpi	r20, 0x3A	; 58
    11a4:	18 f0       	brcs	.+6      	; 0x11ac <__ultoa_invert+0x7c>
    11a6:	49 5d       	subi	r20, 0xD9	; 217
    11a8:	31 fd       	sbrc	r19, 1
    11aa:	40 52       	subi	r20, 0x20	; 32
    11ac:	41 93       	st	Z+, r20
    11ae:	02 d0       	rcall	.+4      	; 0x11b4 <__ultoa_invert+0x84>
    11b0:	a9 f7       	brne	.-22     	; 0x119c <__ultoa_invert+0x6c>
    11b2:	ea cf       	rjmp	.-44     	; 0x1188 <__ultoa_invert+0x58>
    11b4:	b4 e0       	ldi	r27, 0x04	; 4
    11b6:	a6 95       	lsr	r26
    11b8:	97 95       	ror	r25
    11ba:	87 95       	ror	r24
    11bc:	77 95       	ror	r23
    11be:	67 95       	ror	r22
    11c0:	ba 95       	dec	r27
    11c2:	c9 f7       	brne	.-14     	; 0x11b6 <__ultoa_invert+0x86>
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	61 05       	cpc	r22, r1
    11c8:	71 05       	cpc	r23, r1
    11ca:	08 95       	ret
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	0a 2e       	mov	r0, r26
    11d2:	06 94       	lsr	r0
    11d4:	57 95       	ror	r21
    11d6:	47 95       	ror	r20
    11d8:	37 95       	ror	r19
    11da:	27 95       	ror	r18
    11dc:	ba 95       	dec	r27
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__ultoa_invert+0xa2>
    11e0:	62 0f       	add	r22, r18
    11e2:	73 1f       	adc	r23, r19
    11e4:	84 1f       	adc	r24, r20
    11e6:	95 1f       	adc	r25, r21
    11e8:	a0 1d       	adc	r26, r0
    11ea:	08 95       	ret

000011ec <__divmodsi4>:
    11ec:	05 2e       	mov	r0, r21
    11ee:	97 fb       	bst	r25, 7
    11f0:	1e f4       	brtc	.+6      	; 0x11f8 <__divmodsi4+0xc>
    11f2:	00 94       	com	r0
    11f4:	0e 94 0d 09 	call	0x121a	; 0x121a <__negsi2>
    11f8:	57 fd       	sbrc	r21, 7
    11fa:	07 d0       	rcall	.+14     	; 0x120a <__divmodsi4_neg2>
    11fc:	0e 94 5f 09 	call	0x12be	; 0x12be <__udivmodsi4>
    1200:	07 fc       	sbrc	r0, 7
    1202:	03 d0       	rcall	.+6      	; 0x120a <__divmodsi4_neg2>
    1204:	4e f4       	brtc	.+18     	; 0x1218 <__divmodsi4_exit>
    1206:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__negsi2>

0000120a <__divmodsi4_neg2>:
    120a:	50 95       	com	r21
    120c:	40 95       	com	r20
    120e:	30 95       	com	r19
    1210:	21 95       	neg	r18
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	4f 4f       	sbci	r20, 0xFF	; 255
    1216:	5f 4f       	sbci	r21, 0xFF	; 255

00001218 <__divmodsi4_exit>:
    1218:	08 95       	ret

0000121a <__negsi2>:
    121a:	90 95       	com	r25
    121c:	80 95       	com	r24
    121e:	70 95       	com	r23
    1220:	61 95       	neg	r22
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	8f 4f       	sbci	r24, 0xFF	; 255
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	08 95       	ret

0000122a <__muluhisi3>:
    122a:	0e 94 81 09 	call	0x1302	; 0x1302 <__umulhisi3>
    122e:	a5 9f       	mul	r26, r21
    1230:	90 0d       	add	r25, r0
    1232:	b4 9f       	mul	r27, r20
    1234:	90 0d       	add	r25, r0
    1236:	a4 9f       	mul	r26, r20
    1238:	80 0d       	add	r24, r0
    123a:	91 1d       	adc	r25, r1
    123c:	11 24       	eor	r1, r1
    123e:	08 95       	ret

00001240 <__mulshisi3>:
    1240:	b7 ff       	sbrs	r27, 7
    1242:	0c 94 15 09 	jmp	0x122a	; 0x122a <__muluhisi3>

00001246 <__mulohisi3>:
    1246:	0e 94 15 09 	call	0x122a	; 0x122a <__muluhisi3>
    124a:	82 1b       	sub	r24, r18
    124c:	93 0b       	sbc	r25, r19
    124e:	08 95       	ret

00001250 <__prologue_saves__>:
    1250:	2f 92       	push	r2
    1252:	3f 92       	push	r3
    1254:	4f 92       	push	r4
    1256:	5f 92       	push	r5
    1258:	6f 92       	push	r6
    125a:	7f 92       	push	r7
    125c:	8f 92       	push	r8
    125e:	9f 92       	push	r9
    1260:	af 92       	push	r10
    1262:	bf 92       	push	r11
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	ca 1b       	sub	r28, r26
    127a:	db 0b       	sbc	r29, r27
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	09 94       	ijmp

00001288 <__epilogue_restores__>:
    1288:	2a 88       	ldd	r2, Y+18	; 0x12
    128a:	39 88       	ldd	r3, Y+17	; 0x11
    128c:	48 88       	ldd	r4, Y+16	; 0x10
    128e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1290:	6e 84       	ldd	r6, Y+14	; 0x0e
    1292:	7d 84       	ldd	r7, Y+13	; 0x0d
    1294:	8c 84       	ldd	r8, Y+12	; 0x0c
    1296:	9b 84       	ldd	r9, Y+11	; 0x0b
    1298:	aa 84       	ldd	r10, Y+10	; 0x0a
    129a:	b9 84       	ldd	r11, Y+9	; 0x09
    129c:	c8 84       	ldd	r12, Y+8	; 0x08
    129e:	df 80       	ldd	r13, Y+7	; 0x07
    12a0:	ee 80       	ldd	r14, Y+6	; 0x06
    12a2:	fd 80       	ldd	r15, Y+5	; 0x05
    12a4:	0c 81       	ldd	r16, Y+4	; 0x04
    12a6:	1b 81       	ldd	r17, Y+3	; 0x03
    12a8:	aa 81       	ldd	r26, Y+2	; 0x02
    12aa:	b9 81       	ldd	r27, Y+1	; 0x01
    12ac:	ce 0f       	add	r28, r30
    12ae:	d1 1d       	adc	r29, r1
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	ed 01       	movw	r28, r26
    12bc:	08 95       	ret

000012be <__udivmodsi4>:
    12be:	a1 e2       	ldi	r26, 0x21	; 33
    12c0:	1a 2e       	mov	r1, r26
    12c2:	aa 1b       	sub	r26, r26
    12c4:	bb 1b       	sub	r27, r27
    12c6:	fd 01       	movw	r30, r26
    12c8:	0d c0       	rjmp	.+26     	; 0x12e4 <__udivmodsi4_ep>

000012ca <__udivmodsi4_loop>:
    12ca:	aa 1f       	adc	r26, r26
    12cc:	bb 1f       	adc	r27, r27
    12ce:	ee 1f       	adc	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	a2 17       	cp	r26, r18
    12d4:	b3 07       	cpc	r27, r19
    12d6:	e4 07       	cpc	r30, r20
    12d8:	f5 07       	cpc	r31, r21
    12da:	20 f0       	brcs	.+8      	; 0x12e4 <__udivmodsi4_ep>
    12dc:	a2 1b       	sub	r26, r18
    12de:	b3 0b       	sbc	r27, r19
    12e0:	e4 0b       	sbc	r30, r20
    12e2:	f5 0b       	sbc	r31, r21

000012e4 <__udivmodsi4_ep>:
    12e4:	66 1f       	adc	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	1a 94       	dec	r1
    12ee:	69 f7       	brne	.-38     	; 0x12ca <__udivmodsi4_loop>
    12f0:	60 95       	com	r22
    12f2:	70 95       	com	r23
    12f4:	80 95       	com	r24
    12f6:	90 95       	com	r25
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	bd 01       	movw	r22, r26
    12fe:	cf 01       	movw	r24, r30
    1300:	08 95       	ret

00001302 <__umulhisi3>:
    1302:	a2 9f       	mul	r26, r18
    1304:	b0 01       	movw	r22, r0
    1306:	b3 9f       	mul	r27, r19
    1308:	c0 01       	movw	r24, r0
    130a:	a3 9f       	mul	r26, r19
    130c:	70 0d       	add	r23, r0
    130e:	81 1d       	adc	r24, r1
    1310:	11 24       	eor	r1, r1
    1312:	91 1d       	adc	r25, r1
    1314:	b2 9f       	mul	r27, r18
    1316:	70 0d       	add	r23, r0
    1318:	81 1d       	adc	r24, r1
    131a:	11 24       	eor	r1, r1
    131c:	91 1d       	adc	r25, r1
    131e:	08 95       	ret

00001320 <_exit>:
    1320:	f8 94       	cli

00001322 <__stop_program>:
    1322:	ff cf       	rjmp	.-2      	; 0x1322 <__stop_program>
